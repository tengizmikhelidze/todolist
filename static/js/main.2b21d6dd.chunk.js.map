{"version":3,"sources":["components/ToDo.js","components/ToDoList.js","components/Form.js","components/clear.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","todoList","settodoList","todo","className","completed","text","onClick","e","preventDefault","map","item","id","filter","ToDoList","filteredTodo","key","counter","Form","inputText","setinputText","setstatus","status","error","seterror","type","placeholder","onChange","target","value","document","getElementById","name","defaultValue","Clear","setfilteredTodo","App","useState","useEffect","getLocalTodos","filterchange","saveLovalTodos","localStorage","setItem","JSON","stringify","getItem","localtodo","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2b21d6dd.chunk.js","sourcesContent":["import React from 'react' \r\n\r\nconst ToDo =({todoList, settodoList, todo})=>{\r\n    const checkbtn = (e) =>{\r\n        e.preventDefault();\r\n        settodoList(todoList.map( item => item.id === todo.id ? {...item, completed : !item.completed} : {...item} ));\r\n        \r\n    }\r\n    const deletebtn = (e) =>{\r\n        e.preventDefault();\r\n        settodoList( todoList.filter( item => item.id !== todo.id ) );\r\n    }\r\n    return(\r\n        <div className=\"todo-li\">\r\n            <li className={`li-item ${todo.completed ? 'completed':''}`}>\r\n                {todo.text} \r\n            </li>\r\n            <div className=\"li-btns\">\r\n                <button className=\"check-btn\" onClick={checkbtn}> <i className=\"fas fa-check-square\"></i> </button>\r\n                <button className=\"delete-btn\" onClick={deletebtn}> <i className=\"fas fa-trash-alt\"></i> </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo;","import React from 'react'\r\nimport ToDo from './ToDo'\r\nconst ToDoList =({todoList, settodoList,filteredTodo}) =>{\r\n    return(\r\n        <div className=\"todo-list\">\r\n            <ul className=\"todo-ul\">\r\n                {filteredTodo.map( (todo) => <ToDo  todoList={todoList} settodoList={settodoList} todo={todo} key={todo.id} /> )}    \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import React from 'react'\r\nvar counter =0;\r\nconst Form =({inputText, setinputText, todoList,settodoList, status, setstatus, error, seterror})=>{\r\n\r\n    const changeTextHandler = (e) => {\r\n        e.preventDefault();\r\n        setinputText(e.target.value);\r\n    }\r\n\r\n    const plusHandler = (e) => {\r\n        e.preventDefault();\r\n        if(inputText == \"\"){\r\n            seterror(true);\r\n            document.getElementById('input').placeholder = \"Invalid Item\"\r\n        } else {\r\n            seterror(false);\r\n            document.getElementById('input').placeholder = \"Enter Item\"\r\n            settodoList([...todoList, {text:inputText, completed: false, id:counter++}]);\r\n            setinputText('');\r\n        }\r\n    }\r\n\r\n    const selectHandler = (e) => {\r\n        setstatus(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form className=\"input-form\">\r\n            <div className={`input ${error===true ? 'error' : ''}`}>\r\n                <input id=\"input\" type=\"text\" placeholder=\"Enter item\" onChange={changeTextHandler} value={inputText}/>\r\n                <button className=\"plus-btn\" type=\"submit\" onClick={plusHandler}>\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n            </div>\r\n            <select name=\"filter-todos\" id=\"filter-todos\" onChange={selectHandler}>\r\n                <option value=\"all\" defaultValue>all</option>\r\n                <option value=\"completed\">completed</option>\r\n                <option value=\"uncompleted\">uncompleted</option>\r\n            </select>\r\n            </form>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Clear = ({setinputText,settodoList, setstatus,seterror, setfilteredTodo}) => {\r\n    const clearHandler = () => {\r\n        setinputText('');\r\n        settodoList([]);\r\n        setstatus('all');\r\n        setstatus(false);\r\n        setfilteredTodo([]);\r\n    }\r\n    return (\r\n        <div className=\"clear\">\r\n            <button className=\"clearBtn\" type=\"submit\" onClick={clearHandler}>\r\n                Clear All\r\n            </button>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Clear","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList'\nimport Form from './components/Form'\nimport Clear from './components/clear'\n\nfunction App() {\n  //States\n  const [inputText, setinputText] = useState('');\n  const [todoList, settodoList] = useState([]);\n  const [filteredTodo, setfilteredTodo] = useState([]);\n  const [status, setstatus] = useState('all');\n  const [error, seterror] = useState(false);\n  //useEffect\n  useEffect( () => {\n    getLocalTodos();\n  }, [])\n\n  useEffect(() => {\n    filterchange();\n    saveLovalTodos();\n  }, [status, todoList])\n  //Functions\n  const filterchange = () => {\n    switch(status) {\n      case 'completed': setfilteredTodo(todoList.filter( item => item.completed===true ));\n        break;\n      case 'uncompleted':  setfilteredTodo(todoList.filter( item => item.completed===false ));\n        break;\n      default : setfilteredTodo(todoList.map( item => item ));\n    }\n  }\n\n  // save to LocalStorage\n  const saveLovalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todoList));\n  }\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') == null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      var localtodo = JSON.parse(localStorage.getItem('todos'));\n      settodoList(localtodo);\n    }\n  }\n  //Return\n  return (\n    <div className=\"whole-wrapper\">\n        <Form inputText={inputText} setinputText={setinputText} todoList={todoList} settodoList={settodoList} status={status} setstatus={setstatus} error={error} seterror={seterror}/>\n        <ToDoList todoList={todoList} settodoList={settodoList} filteredTodo={filteredTodo}/>\n        <Clear inputText={inputText} setinputText={setinputText} todoList={todoList} settodoList={settodoList} status={status} setstatus={setstatus} error={error} seterror={seterror} setfilteredTodo={setfilteredTodo}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}